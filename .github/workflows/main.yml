name: ecr push image

on:
  push:
    tags:
      - v*  # 'v' で始まるタグに反応（例: v1.0.0）

jobs:
  push:
    runs-on: ubuntu-latest
    # `permissions` を設定しないと OIDC が使えないので注意
    permissions:
      id-token: write
      contents: read
    # github actionを止める／再開する場合は削除
    if: false
    steps:
      - name: Checkout code
      - uses: actions/checkout@v3

      # AWS 認証
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: arn:aws:iam::747280103911:user/tenten
          role-session-name: GitHubActions

      # ECR ログイン
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
        with:
          mask-password: false
          registry-type: private
          skip-logout: false


      # Docker イメージを build・push する
      - name: build and push docker image to ecr
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          REPOSITORY_NAME=$(basename ${{ github.repository }})
          IMAGE_NAME="${REGISTRY}/${REPOSITORY_NAME}:${IMAGE_TAG}"
          docker build -t ${IMAGE_NAME} . -f docker/Dockerfile
          docker push ${IMAGE_NAME}
          
          IMAGE_URI="747280103911.dkr.ecr.ap-northeast-1.amazonaws.com/${REPOSITORY_NAME}:${IMAGE_TAG}"
          # 関数の存在確認
          if aws lambda get-function --function-name ${REPOSITORY_NAME} --region ap-northeast-1 --no-cli-pager ; then
              # 関数が存在する場合、更新
              aws lambda update-function-code --function-name ${REPOSITORY_NAME} --image-uri ${IMAGE_URI} --region ap-northeast-1 --no-cli-pager
          else
              # 関数が存在しない場合、新規作成
              # ここでは追加の必要なオプション（ロール、ランタイムなど）を指定する必要があります
              aws lambda create-function --function-name $FUNCTION_NAME --code ImageUri=${IMAGE_URI} --region ${AWS_REGION} --no-cli-pager
          fi